#include<bits/stdc++.h>
using namespace std;
#define sf scanf
#define pf printf
#define pb push_back
#define i64 long long int

bool status[1000002] = {0};
int data[1000002];
int pl;
void prime()
{
    int N = 1000000;
    int sq = sqrt(N);

    for(int i = 4 ; i<=N ; i+=2) status[i] = 1;
    for(int i = 3 ; i<=sq ; i+=2)
    {
        if(status[i] == 0)
        {

            for(int j = i*i ; j<=N ; j+=i)
            {
                status[j] = 1;
            }
        }

    }
    data[pl++] = 2;
    for(int i = 3 ; i<=N ; i+=2)
    {
        if(status[i]==0)
        {
            data[pl++] = i;
        }
    }
    status[1] = 1;
}

bool check(i64 n)
{
    if(n<1000000)
    {
        if(status[n] == 0) return 0;
        else return 1;
    }
    else
    {
        int sqrn = sqrt(n);
        for(int i = 0 ; i<pl && data[i]<=sqrn ; i++)
        {
            if(n%data[i] == 0) return 1;
        }
        return 0;
    }
}
int main()
{
    prime();

    i64 l,u,i;
    vector<i64> v;
    while(sf("%lld%lld",&l,&u) == 2)
    {
        if(l == 0 || l == 1) l = 2;
        else if(l%2 == 0 && l!=2) l++;

        for(; l<=u ; l+=2)
        {
            if(check(l) == 0)
            {
                v.pb(l);
            }
            if(l == 2) l--;
        }
        int sz = v.size();

        int mx = 0,c1,c2,mn = 2147483647 ,d1,d2;
        if(sz>1)
        {
            for(i = 0 ; i<sz-1 ; i++)
            {
                if((v[i+1]-v[i])>mx)
                {
                    mx = v[i+1]-v[i];
                    d1 = v[i];
                    d2 = v[i+1];
                }
                if((v[i+1]-v[i])<mn)
                {
                    mn = v[i+1]-v[i];
                    c1 = v[i];
                    c2 = v[i+1];
                }
            }
        }


        if(mx == 0) pf("There are no adjacent primes.\n");
        else pf("%d,%d are closest, %d,%d are most distant.\n",c1,c2,d1,d2);
        v.clear();
    }

return 0;
}
